'''
  Project: CS 5770 warmup
  Author: Zhang.yifan2@husky.neu.edu
  Date: 01/19/2016
'''
import sys
import struct
import socket
import pickle
import select
import binascii
import os 

# Common variables 
gitAccName = "commutative_octet"
accNameLen = len(gitAccName)
secretValueFileName = "secretvalue.txt"
host = "172.17.0.1"
port = 7789
encodeCharset = "UTF-8"
recvBlockSize = 8192

# Computation funcation utility

'''
# xorComputation(_str)
# this function will perform xor computation
# for each character of a string and return
# a new bytes array.
# _str: a ascii string. 
'''
def xorComputation(_str): 
    biArray = bytearray(_str,encodeCharset)
    xorFactor = 0xb7
    result = []
    for b in biArray:
        result.append(b ^ xorFactor) # xor e``ach character with a xor Factor
    return result

'''
# cvtlittleToBig (_intValue)
# this function will convert a single 
# int value to big endian representation.
# it returns a big endian bytes 
# _intValue: a single int value
'''
def cvtLittleToBig(_intValue):
    return struct.pack(">i0l", _intValue)

'''
# cvtIntArrayToBig(_intArray)
# this function will convert 
# each int element of the array
# to big endian representation 
# it returns a new big endian int array
# _intArray: an int array 
'''
def cvtIntArrayToBig(_intArray):
    tempArray = []
    for i in _intArray:
        tempArray.append(cvtLittleToBig(i))
    return tempArray          

'''
# cvtBigArrayToString(_bigArray)
# this function will convert a big endian
# int array to a new string which helps
# us to prepare message sending through 
# socket
# _bigArray: int array with big endian representation 
'''
def cvtBigArrayToString(_bigArray):
    bigString = ""
    for bs in _bigArray:
        bigString += bs.decode(encodeCharset,'ignore')
    return bigString

'''
# cfeateSecretValueFile(_message,_fileName)
# this function will create a file to store secret
# value replied by sever
# _message: secret message returned by server
#_fileName: the name of the file containing secret value
'''
def createSecretValueFile(_message, _fileName):
    try:
        currentWrkDir = os.getcwd()
        if "solution" not in currentWrkDir:
            filePath = currentWrkDir + "/value/" + _fileName
        else:
            filePath = os.path.dirname(currentWrkDir) + "/value/" + _fileName
        f = open(filePath,'w')
        f.write(_message)
    except Exception as msg:
        print (msg)
    finally:
        f.close    

'''
# decodeResponseForMessage(_data) 
# this function will split Response message from 
# entire bytes response 
# _data: bytes strings (response from socket)
'''
def decodeResponseForMessage(_data):
    return _data[4:]
'''
 # decodeResponseForLenth(_data)
 # this function will split the bytes response
 # and convert the first 4 bytes to integer which
 # represents the length of response
 # _data: bytes strings (response from socket)
 '''   
def decodeResponseForLenth (_data):
    length =  _data[0:4]
    return  int(binascii.b2a_hex(_data[0:4]),16)

# Message manipulation 
xorArray = xorComputation(gitAccName)               # xor commutative_octet with 0xb7
bigArray = cvtIntArrayToBig(xorArray)                  # convert xored data into big endian and stored in an array bigArray 
bigAccLength = cvtLittleToBig(accNameLen)        # convert Git account name length to big endian 
bigArrayString = cvtBigArrayToString(bigArray)   # convert values in bigArray to a string 

messageSend = bytearray( (bigAccLength.decode(encodeCharset) + bigArrayString),encodeCharset)
print ("The message sent to server is ready!\n")
print ("The message content is \n")
print (messageSend)
print ("\n")

# Socket client
try:
    #socket client connection
    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    svraddr = (host, port)
    sock.connect(svraddr)
    print ("connected to IP address: %s Port: %s\n" % svraddr)
    
    # Socket data sending 
    sock.sendall(messageSend)    
    print ("Message has been send to server, please wait for response!\n")
    
    # Socket data recieving 
    data = sock.recv(recvBlockSize)
    print (data)
    print ("The response has been recived, now processing! \n")
    
    decodeScretLength = decodeResponseForLenth(data)    
    secretValue = decodeResponseForMessage(data).decode(encodeCharset)
    secretMSGLength = len(secretValue)
    
    print ("the response processing finished!\n")
    print (decodeScretLength)
    print (secretMSGLength)
    if decodeScretLength == secretMSGLength:
        print ("Decode length from response: %d \n Decode message Length: %d \n" % (decodeScretLength,secretMSGLength))
        print ("The secret value is here: \n")
        print (secretValue)
        print ("creating file value under /secret folder to store secret value !\n")
        
        createSecretValueFile(secretValue, secretValueFileName)
        
        print ("File created successfully! Please see it at %s /value \n" %os.getcwd() )
        print ("\n")
        print ("Thanks for using this program ^_^ !\n")        
    else:
        print ("Length not match, please checking the data you send and recieved is correct!")    
    
except socket.error as msg:
    print (msg)
finally:
    sock.close()
