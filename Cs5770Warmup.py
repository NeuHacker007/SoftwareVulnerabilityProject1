''' 
  Author: Zhang.yifan2@husky.neu.edu
  Date: 01/19/2016
'''
import sys
#import __builtin__
import struct
import socket
import pickle

# Common variables 
gitAccName = "commutative_octet"
accNameLen = len(gitAccName)

# Computation funcation utility 
def xorComputation(_str): 
    biArray = bytearray(_str,"UTF-8")
    xorFactor = 0xb7
    result = []
    for b in biArray:
        result.append(b ^ xorFactor)
    return result

def cvtLittleToBig(_intValue):
    return struct.pack(">i0l", _intValue)

def cvtIntArrayToBig(_intArray):
    tempArray = []
    for i in _intArray:
        tempArray.append(cvtLittleToBig(i))
    return tempArray          

def cvtXorResultToNewStr(_xorArray):
    output = ""
    for intstr in _xorArray:
        output += chr(intstr)
    return output

def cvtBigArrayToString(_bigArray):
    bigString = ""
    for bs in _bigArray:
        bigString += bs.decode('UTF-32BE','ignore')
    return bigString

# Message manipulation 
xorArray = xorComputation(gitAccName)            # xor commutative_octet with 0xb7
bigArray = cvtIntArrayToBig(xorArray)            # convert xored data into big endian and stored in an array bigArray 
bigAccLength = cvtLittleToBig(accNameLen)        # convert Git account name length to big endian 
bigArrayString = cvtBigArrayToString(bigArray)   # convert values in bigArray to a string 

#print ("The length of Account name in Big endian: " + bigAccLength.decode("UTF-32BE") + "\n")
#print ("The Xor int Array in Big endian: " + bigArrayString.decode("UTF-32BE") + "\n")
messageSend = bytearray( (bigAccLength.decode("UTF-32BE") + bigArrayString),"UTF-32BE")
print ("The message sent to server is ready!\n")

# Socket client
try:
    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    svraddr = ('172.17.0.1', 7789)
    sock.connect(svraddr)

    # Socket data sending 
    sock.sendall(messageSend)

    # Socket data recieving 
    data = sock.recv(4096)
    print (data.decode("UTF-8"))
    print ("the secret value receieved")
except socket.error as msg:
    print (msg)
finally:
    sock.close()
